spring.thymeleaf.cache=false
spring.thymeleaf.enabled=true
# remember to include / on the end.
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.encoding=UTF-8

# Application config
spring.application.static.path=classpath:/static/

# API Cache
spring.cache.cache-names=bitbucketTags,deploymentInstances

spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=50MB

server.tomcat.max-http-form-post-size= -1

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.hibernate.ddl-auto=validate

spring.flyway.baseline-on-migrate=true
spring.flyway.locations=classpath:db/migration
spring.flyway.check-location=false

server.port=${SERVER_PORT}

# File path to the git checkout for the source data
# This dir must not exist already for a fresh checkout.
git.sourcedata.checkout.path=${GIT_LOADING_UI_SOURCE_CHECKOUT_PATH}
git.sourcedata.checkout.subpath.data=data/
data.aws.region=${AWS_DEFAULT_REGION}

data.dl-dataset.filename=${DATA_FILENAME}
data.ui.filename=${DATA_UI_FILENAME}

# data item path used for adding new items
data.item.path=${LOADING_UI_DATA_ITEM_PATH}

# Additional data config
data.url.display=${LOADING_UI_DATA_URL_DISPLAY}
data.path.images=${LOADING_UI_DATA_PATH_IMAGES}
data.path.html=${LOADING_UI_DATA_PATH_HTML}
data.path.items=${LOADING_UI_DATA_ITEM_PATH}

# Authentication / Authorisation
# 'hardcoded' to read usernames from users.hardcoded-users.file
# The format of the file is:
#   username = <password>(,(enabled|disabled|<role-name>))*
# Options [database, hardcoded]
users.source=${LOADING_UI_USERS_SOURCE}

# Defines the users to use when the hardcoded user.source is enabled.
#
# The format of the file is:
#   username,username,username
users.hardcoded-users-file=${LOADING_UI_HARDCODED_USERS_FILE}

# auth.methods is a comma-separated list of authentication methods to enable
# Just use HTTP basic authentication
# possibilities: [basic,saml]
auth.methods=${LOADING_UI_AUTH_METHODS}

# The method for transforming passwords before storing/comparing.
#
# The insecure-plaintext-for-testing method compares plaintext passwords without
# any non-reversable encoding, and should (obviously) only be used for
# development/testing purposes.
auth.password-encoding.method=${LOADING_UI_AUTH_PASSWORD_ENCODING_METHOD}

# SAML Config
auth.saml.keycloak.auth-server-url=${LOADING_UI_AUTH_URL}
auth.saml.keystore.path=${LOADING_UI_AUTH_KEY_PATH}
auth.saml.entityId=${LOADING_UI_AUTH_ENTITY_ID}
auth.saml.keystore.storePass=${LOADING_UI_AUTH_STORE_PASSWORD}
auth.saml.keystore.key=${LOADING_UI_AUTH_KEY}
auth.saml.keystore.keyPass=${LOADING_UI_AUTH_KEY_PASSWORD}

auth.saml.attr.firstName=${LOADING_UI_AUTH_SAML_FIRSTNAME}
auth.saml.attr.lastName=${LOADING_UI_AUTH_SAML_LASTNAME}
auth.saml.attr.email=${LOADING_UI_AUTH_SAML_EMAIL}

## PostgreSQL
# These settings are also the defaults used in the project's docker-compose.yml
spring.datasource.url=jdbc:postgresql://${LOADING_DB_HOST_AND_PORT}/${LOADING_DB_DATABASE}
spring.datasource.username=${LOADING_DB_USER}
spring.datasource.password=${LOADING_DB_PASSWORD}

# copy data from staging bucket (releases, processed data_ to production bucket
deploy.releases.staging.bucketname=${DEPLOYMENT_S3_RELEASES_STAGING_BUCKET}
deploy.releases.staging.transcription.bucketname=${DEPLOYMENT_S3_RELEASES_STAGING_TRANSCRIPTION_BUCKET}
deploy.releases.production.bucketname=${DEPLOYMENT_S3_RELEASES_PRODUCTION_BUCKET}
deploy.releases.production.transcription.bucketname=${DEPLOYMENT_S3_RELEASES_PRODUCTION_TRANSCRIPTION_BUCKET}
deploy.datasync.task.arn=${DEPLOYMENT_DATASYNC_TASK_ARN}

# SSL config
server.ssl.enabled=${SERVER_SSL_ENABLE}
server.ssl.protocol=TLS

server.ssl.key-store-password=gs6Tson34lwnwpy
server.ssl.key-store-type=PKCS12
server.ssl.key-store=classpath:ssl/keystore.p12
server.ssl.key-alias=${SERVER_SSL_KEYSTORE_ALIAS}

